{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91914\\\\Downloads\\\\SchbangQ-main\\\\SchbangQ-main\\\\src\\\\components\\\\StarRating.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StarRating = ({\n  rating\n}) => {\n  // Determine the color based on the rating\n  const getColor = () => {\n    return rating < 2 ? 'red' : 'yellow';\n  };\n\n  // Logic to render stars based on the rating\n  const renderStars = () => {\n    const stars = [];\n    for (let i = 0; i < 5; i++) {\n      if (i < rating) {\n        stars.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2605\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 20\n        }, this)); // Render a filled star\n      } else {\n        stars.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u2606\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 20\n        }, this)); // Render an empty star\n      }\n    }\n    return stars;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `star-rating ${getColor()}`,\n    children: [\" \", renderStars()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = StarRating;\nexport default StarRating;\nvar _c;\n$RefreshReg$(_c, \"StarRating\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","StarRating","rating","getColor","renderStars","stars","i","push","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/91914/Downloads/SchbangQ-main/SchbangQ-main/src/components/StarRating.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst StarRating = ({ rating }) => {\r\n  // Determine the color based on the rating\r\n  const getColor = () => {\r\n    return rating < 2 ? 'red' : 'yellow';\r\n  };\r\n\r\n  // Logic to render stars based on the rating\r\n  const renderStars = () => {\r\n    const stars = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      if (i < rating) {\r\n        stars.push(<span key={i}>&#9733;</span>); // Render a filled star\r\n      } else {\r\n        stars.push(<span key={i}>&#9734;</span>); // Render an empty star\r\n      }\r\n    }\r\n    return stars;\r\n  };\r\n\r\n  return (\r\n    <div className={`star-rating ${getColor()}`}> {/* Apply the CSS class based on the rating */}\r\n      {renderStars()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarRating;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EACjC;EACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,OAAOD,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,QAAQ;EACtC,CAAC;;EAED;EACA,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAIA,CAAC,GAAGJ,MAAM,EAAE;QACdG,KAAK,CAACE,IAAI,eAACP,OAAA;UAAAQ,QAAA,EAAc;QAAO,GAAVF,CAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,CAAC,CAAC,CAAC;MAC5C,CAAC,MAAM;QACLP,KAAK,CAACE,IAAI,eAACP,OAAA;UAAAQ,QAAA,EAAc;QAAO,GAAVF,CAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CAAC,CAAC,CAAC,CAAC;MAC5C;IACF;IACA,OAAOP,KAAK;EACd,CAAC;EAED,oBACEL,OAAA;IAAKa,SAAS,EAAG,eAAcV,QAAQ,CAAC,CAAE,EAAE;IAAAK,QAAA,GAAC,GAAC,EAC3CJ,WAAW,CAAC,CAAC;EAAA;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACE,EAAA,GAxBIb,UAAU;AA0BhB,eAAeA,UAAU;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}